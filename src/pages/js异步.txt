ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。
Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。
then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。

Promise 新建后就会立即执行。

使用promise实现AJAX

function getJSON(url){
    return new Promise(function(resolve, reject){
        count xhr = new XMLHttpRequest();
        xhr.open(url);
        xhr.setRequestHeader("Accept", "application/json");
        xhr.onreadystatechange = function(respones){
            if(respones.readyState == 4){
                if(respones.status == 200){
                    resolve(respones);
                }else{
                    reject(respones);
                }
            }
        }
        xhr.send();
    })
}

一个异步操作的结果是返回另一个异步操作:(p1 被 p2 的 resolve 包裹)
    注意，这时p1的状态就会传递给p2，也就是说，p1的状态决定了p2的状态。

Promise.prototype.then()
Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。
第一个then回调函数完成以后，会将返回结果作为参数，传入第二个then回调函数。
前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。

Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。

如果 Promise 状态已经变成resolved，再抛出错误是无效的。

一般来说，不要在then方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。

Promise 内部的(是指new的时候传进的callback)错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。

Promise.prototype.finally()
finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作

如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。

const p = Promise.race([p1, p2, p3])
只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。

Promise.resolve()
有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。
（1）参数是一个 Promise 实例
如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。
（2）参数是一个thenable对象（thenable对象指的是具有then方法的对象，比如下面这个对象）
Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。
（3）参数不是具有then方法的对象，或根本就不是对象
如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。
（4）不带有任何参数
Promise.resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。
所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve方法。
需要注意的是，立即resolve的 Promise 对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。

Promise.try()
待确认。。。
Promise 对象它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。


Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同
Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。
执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。
特征:
    function关键字与函数名之间有一个星号；
    函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）;
总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。
以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。
value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。
注意:
    yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。
    yield表达式如果用在另一个表达式之中，必须放在圆括号里面，yield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。

yield表达式本身没有返回值，或者说总是返回undefined。
next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。
for...of循环可以自动遍历 Generator 函数时生成的Iterator对象，且此时不再需要调用next方法。
Generator.prototype.return()
Generator 函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历 Generator 函数。
如果return方法调用时，不提供参数，则返回值的value属性为undefined。
如果 Generator 函数内部有try...finally代码块，那么return方法会推迟到finally代码块执行完再执行。
next()、throw()、return() 的共同点
next()是将yield表达式替换成一个值。
throw()是将yield表达式替换成一个throw语句。
return()是将yield表达式替换成一个return语句。
yield* 表达式
用来在一个 Generator 函数里面执行另一个 Generator 函数。

使用 Generator 函数，执行一个真实的异步任务:
function* gen(){
  var url = 'https://api.github.com/users/github';
  var result = yield fetch(url);
  console.log(result.bio);
}
var g = gen();
var result = g.next();
result.value.then(function(data){
  return data.json();
}).then(function(data){
  g.next(data);
});
Thunk 函数
Thunk 函数是自动执行 Generator 函数的一种方法。
编译器的“传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。


async 函数是什么？一句话，它就是 Generator 函数的语法糖。
async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。
async函数对 Generator 函数的改进，体现在以下四点:
    （1）内置执行器。
    （2）更好的语义。
    （3）更广的适用性。
    （4）返回值是 Promise。
        async函数内部return语句返回的值，会成为then方法回调函数的参数。
        sync函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。
await命令
await命令后面是一个 Promise 对象。如果不是，会被转成一个立即resolve的 Promise 对象。
await命令后面的 Promise 对象如果变为reject状态，则reject的参数会被catch方法的回调函数接收到。
只要一个await语句后面的 Promise 变为reject，那么整个async函数都会中断执行。
使用注意点：
    await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch代码块中。
    多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。（Promise.all）
    await命令只能用在async函数之中，如果用在普通函数，就会报错。


async 函数与 Promise、Generator 函数的比较：
    


